欠缺部分：
一，js->数组（array）
	创建空数组带有长度  var a=new Array(20) 
	创建一个数组  var b=new Array("jack","fsd","fsfsds")
	不带new创建数组 var c=Array("jack","fsd","fsfsds")
	直接创建数组 var a=['red','pink','blue']
一（1） 数组的操作方法
	length 跳过
	var a=[1,2,3,4,5] 创建一个简单数组
	a.concat("menghui") 返回[1, 2, 3, 4, 5, "menghui"]  连接俩个或者多个数组 a.concat("menghui","dssd")
	a.join() 分隔符 默认逗号  a.join("/") 返回 "1/2/3/4/5"
	
	新建一个打乱的数组 var b=new Array(2,34,6,4,9,2,6,7,3)
	b.sort()排序输出 [2, 2, 3, 34, 4, 6, 6, 7, 9]
	b.reverse() 倒叙输出  返回[9, 7, 6, 6, 4, 34, 3, 2, 2]
	
	map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
	map() 方法按照原始数组元素顺序依次处理元素。
	filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。断言 assert
	some() 只要数组内有一个满足 则返回true

	var a=Array(1,2,3,4,5,6)
	a.splice(1,2) 删除第一个开始 长度为2的  返回被删除的数组 [2, 3] 直接修改数组 
	此时a数组内部为 [1, 4, 5, 6]
	a.splice(1,2,'menghui') 此时删除 后添加新项目 menghui 执行后a的值为[1, "menghui", 6]

	b.slice(2) 截取数组 返回一个子数组 [3, 4, 5, 6]  不会对a数组进行改变
	a.slice(2,4) 截取2到第四个的数组
	
	a.toString() 转换为字符串
	
	a.pop() 删除并且返回数组最后一个元素 
	a.push()向数组末尾添加一个或者多个元素 并且返回数组元素
		a.push("h") 返回7 
		a.push("menghui","hhh") 多个
	shift
	unshift
	判断数组: arr=[]
		Array.isArray(arr)
		Object.prototype.toString.call(arr)
		arr.constructor===Array
		arr instanceof Array
		Array.prototype .isPrototypeOf(arr)
		
			

二，字符串的各种操作方法 常用的
	var a="menghui is god"
	a.charAt(4)  返回 h    从0开始计算 类似于数组
	a.indexOf("h") 返回4  从0开始计算  可以设置起始位置（设置起始位置不会从头开始计算）
	a.replace(/god/,"神") 返回 "menghui is 神"  第一个为需要替换的值，后面是替换的值 （可以使用正则表达式）
	
	var b="你好",c="我是梦回"
	a.concat(b) 返回 "menghui is god你好" 也可以多连接 例如：a.concat(b,c)
	
	a.substr(3) 截取字符串 从第三个开始
	a.substr(3,4) 截取字符串 从第三个开始 长度为4 （后面是长度值）
	a.substring(3) 截取字符串 从第三个开始
	a.substring(3,4) 截取字符串 从第三个开始 第四个结束  （后面是结束的位置）
	
三，对象（object）
	JavaScript中的所有事物都是对象
	内置对象 宿主对象  自定义对象 
	var a=new Object() //创建一个空对象 访问对象的属性都是点语法 例如 xx.length var x=hello.indexOf("l")
	
	每个对象都有与之相关的原型（prototype），类（class) 和可扩展性
	
	对象的常见用法:创建(create) 、设置(set) 、查找(query)、删除(delete) 、检测(test) 和枚举(enumerate) 它的属性
	var person={name:"menghui",age:"18",job:"stu"}  var a=new Object()  var b=Object.create({name:"menghui",age:"18",job:"stu"})
	person.name 返回 menghui
	person["age"] 返回18  两种方法都可以匹配对象内部数据
	person.web="www.52mhzy.cn" 添加数据 	此时person内部{name: "menghui", age: "18", job: "stu", web: "www.52mhzy.cn"}
	person["sex"]="男" 也是可以添加数据
	delete person.age  删除数据 此时person {name: "menghui", job: "stu", sex: "男"}
	
	
	in运算符
		"name" in person  返回布尔值true  如果不在就返回false 检测属性是否存在于对象之中
	hasOwnProperty
		person.hasOwnProperty("age")  返回布尔值true  如果不在就返回false 检测属性是否存在于对象之中
	propertyIsEnumerable
		person.propertyIsEnumerable("sex") 返回布尔值true  如果不在就返回false 检测属性是否存在于对象之中

	person.age!==undefined 利用运算符号来检测 属性是否存在  返回布尔值true  如果不在就返回false 检测属性是否存在于对象之中
	
	枚举
		var x
		undefined
		var txt=""
		undefined
		for(x in person) console.log(x)
		VM5841:1 name
		VM5841:1 job
		VM5841:1 sex
		VM5841:1 age
		undefined
		for (x in person){
 		   txt =txt
		person[x]+";"} console.log(txt)
		VM6000:3 
		undefined
		for (x in person){
    			txt =txt+person[x]+";"} console.log(txt)
		VM6006:2 menghui;stu;男;18;

三（1）对象序列化
	var a={x:1,y:2,y:3}
	JSON.stringify(a) 序列化对象 
	JSON.parse(b) 还原对象
	 	eval("2+3") 计算字符串 
	创建一个json 对象 并且转换为JavaScript对象
		var x={"name":"menghui","age":"18"} 使用eval函数
		eval("x")  变成{name: "menghui", age: "18"} JavaScript对象
当Number()和运算符new -起作为构造函数使用时，它返回一个新创建的 Number对象。如果不用new运算符，把Number()作为一个函数来调用,
它将把自己的参数转换成-个原始的数值，并且返回这个值(如果转换失败，则返回NaN)

四，正则表达式
	可以使用RegExp()构造函数来创建对象:
	var a=newRegExp(s$')
	但是通常直接量语法来创建RegExp对象:
	var a=/s$/

	g
	默认情况下，第一次匹配成功后，正则对象就停止向
	下匹配了。g修饰符表示全局匹配(global) ，加上它以后，
	正则对象将匹配全部符合条件的结果，主要用于搜索和替
	换。
	i默认情况下， 正则对象区分字母的大小写，加上i修饰
	符以后表示忽略大小写(ignorecase) 。
	m
	有时，字符串的头部或尾部可能会有换行符。默认情
	况下，正则对象会将换行符算入字符串的开头或结尾。m
	修饰符表示多行模式(mutiline)，加上它以后，正则对
	象会忽略字符串头部或尾部的换行符，即^和$会忽略换行
	符




